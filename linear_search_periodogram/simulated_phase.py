import numpy as np

class SimulatedPhase: 
    """Simulated observation phase, including random phase noise, random vertical 
       baseline, conversion coefficient from parameters to phase, and observation phase
       per arc, using the simulation method of 'linear deformation + terrain height 
       residual + random phase noise'.
    """

    def __init__(self, param_file, check_times, check_num, sat_name="sentinel-1"):
        """
        Parameters
        ----------
        param_file : json
            _Dictionary file, containing all the parameters in the JSON file._
        check_times : _int_
            _Number of simulation iterations_
        check_num : _int_
            _Simulation parameter index, used to control the random seed._
        sat_name : str, optional
            _Simulated Satellite Names_, by default "sentinel-1"

        m2ph : _float_
            _Deformation-to-Phase Conversion Coefficient,4pi/lambda_
        incidence_angle : _float_
            _Deformation-to-Phase Conversion Coefficient_
        R : _float_
            _Incidence Angle, Radian Mode_
        Bn : _float_
            _Standard Deviation of Vertical Baseline_
        revisit_cycle : _float_
            _revisit cycle_
        """
        self.param_file = param_file
        self.check_times = check_times
        self.check_num = check_num
        self.m2ph = 4 * np.pi / self.param_file[sat_name]["wavelength"]
        self.incidence_angle = param_file[sat_name]["incidence_angle"] * np.pi / 180
        self.R = param_file[sat_name]["H"] / np.cos(self.incidence_angle)
        self.Bn = param_file[sat_name]["Bn"]
        self.revisit_cycle = param_file[sat_name]["revisit_cycle"]

    def add_radom_noise(self):
        """Random Phase Noise
        note:
        Random phase noise is generated by random seeds. The random noise conforms to normal distribution with mean 0 and standard deviation noise_level[deg]
        """
        # Random seed
        np.random.seed(self.check_num + self.check_times)
        # Random phase noise
        self.noise = np.random.normal(0, np.pi * self.param_file["noise_level"] / 180, self.param_file["Nifg"])

    def add_random_baseline(self):
        """Vertical baselines are randomly generated
        note:
            Random vertical baselines are generated by random seeds, which conform to normal distribution with mean 0 and standard deviation Bn[m]
        """
        np.random.seed(self.check_num)
        self.normal_baseline = np.random.normal(0, self.Bn, self.param_file["Nifg"])

    def par2ph(self):
        """_Estimate the conversion coefficient of the parameter to phase_
        Parameters:
        -----------
        h2ph : _float_
            _The conversion factor from height h to phase is related to the vertical baseline_
        v2ph : _float_
            _The conversion coefficient of the deformation rate v to the phase is dependent on the time base line_
        par2ph : _dict_
            _Parameter to phase conversion coefficient, easy to use later_
        note:
            According to function modeol of the observed phase model, the conversion coefficients of parameters to phase, including v2ph and h2ph, can be obtained. 
            Please refer to Chapter 2 of this paper for detailed observation phase model
        """
        self.add_random_baseline()
        par2ph = dict()
        self.h2ph = self.m2ph * self.normal_baseline / (self.R * np.sin(self.incidence_angle))
        self.v2ph = self.m2ph * self.revisit_cycle * np.arange(1, self.param_file["Nifg"] + 1, 1) / 365
        par2ph["height"] = self.h2ph
        par2ph["velocity"] = self.v2ph
        self.par2ph = par2ph

    def sim_arc_phase(self):
        """_Simulate the observed phase per arc arc_

        note:
        By the parameter to phase conversion coefficient and 
        simulation simulation parameter v,h generates the observed phase per arc

        Returns
        -------
        arc_phase : _array_
            _Observed phase per arc arc_
        par2ph : _dict_
            _Parameter to phase conversion factor: dictionary form_
        """
        self.add_radom_noise()
        self.par2ph()
        phase_true = self.param_file["param_simulation"]["height"] * self.h2ph + self.param_file["param_simulation"]["velocity"] * self.v2ph + self.noise
        complex_signal = np.exp(1j * phase_true)
        arc_phase = np.angle(complex_signal)
        return arc_phase, self.par2ph


